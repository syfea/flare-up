<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function getLastPosted($limit = 3)
    {
        return $this->createQueryBuilder('a')
            ->where('a.publishedAt <= :publishedAt')
            ->setParameter('publishedAt', date('Y-m-d H:i:s'))
            ->addOrderBy('a.publishedAt', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function getTopStories($limit = 3)
    {
        return $this->createQueryBuilder('a')
            ->where('a.publishedAt <= :publishedAt')
            ->setParameter('publishedAt', date('Y-m-d H:i:s'))
            ->addOrderBy('a.countView', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function getArticleList($limit = 8)
    {
        return $this->createQueryBuilder('a')
            ->where('a.publishedAt <= :publishedAt')
            ->setParameter('publishedAt', date('Y-m-d H:i:s'))
            ->addOrderBy('a.publishedAt', 'DESC')
            ->setFirstResult(3)
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function getRecentArticleByUser($user = null, $limit = 5)
    {
        $query = $this->createQueryBuilder('a');
        $query->where('a.publishedAt <= :publishedAt')
            ->setParameter('publishedAt', date('Y-m-d H:i:s'));
            if (!is_null($user)) {
                $query->andWhere('a.user = :userId')
                    ->setParameter('userId', $user->getId());
            }
        $query->addOrderBy('a.publishedAt', 'DESC')
            ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function getAllArticlesByCategory($category)
    {
        return $this->createQueryBuilder('a')
            ->where('a.publishedAt <= :publishedAt')
            ->setParameter('publishedAt', date('Y-m-d H:i:s'))
            ->andWhere('a.category = :categoryId')
            ->setParameter('categoryId', $category->getId())
            ->addOrderBy('a.publishedAt', 'DESC')
            ->getQuery()->getResult();
    }

    public function getAllArticlesByUser($user = null)
    {
        $query = $this->createQueryBuilder('a');
        $query->where('a.publishedAt <= :publishedAt')
            ->setParameter('publishedAt', date('Y-m-d H:i:s'));
        if (!is_null($user)) {
            $query->andWhere('a.user = :userId')
            ->setParameter('userId', $user->getId());
        }
        $query->addOrderBy('a.publishedAt', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function getSearch($parameters)
    {
        $parameterArray = explode(' ', $parameters);
        $orWheres = array();
        foreach($parameterArray as $parameter) {
            if (strlen($parameter) >= 3) {
                $orWheres[] = $parameter;
            }
        }

        if (count($orWheres) == 0) {
            return array();
        }

        $return = array();
        foreach ($orWheres as $key => $orWhere) {
            $qb = $this->createQueryBuilder('a')
                ->where('a.publishedAt <= :publishedAt')
                ->andWhere('a.content LIKE :param OR a.smallContent LIKE :param OR a.title LIKE :param')
                ->setParameter('publishedAt', date('Y-m-d H:i:s'))
                ->setParameter('param', '%'.$orWhere.'%')
                ->addOrderBy('a.publishedAt', 'DESC');

            foreach ($qb->getQuery()->getResult() as $article) {
                $return[$article->getId()] = $article;
            }
        }

        return $return;
    }
}
